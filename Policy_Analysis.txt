{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# üèõÔ∏è The Moderating Role of State Environmental Policy on ESG Rating Announcements\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### A Firm-Level Analysis of Stock Market Reactions\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "\n",
    "This notebook extends the findings from our replication of Shanaev & Ghimire (2022). Having established the baseline market reaction to ESG rating changes, we now investigate a new research question: **Does the stringency of a company's state-level environmental policy environment moderate the stock market's reaction to an ESG downgrade?**\n",
    "\n",
    "**Our Hypothesis:**\n",
    "\n",
    "We hypothesize that the negative stock return following an ESG downgrade will be **more severe** for firms headquartered in states with strong environmental policies. The rationale is that for these firms, an ESG failure represents a more material financial risk due to stricter regulations, higher potential litigation costs, and greater public scrutiny.\n",
    "\n",
    "**Methodology:**\n",
    "\n",
    "To test this, we will move from a portfolio-level analysis to a **firm-level panel regression**. We will test for a significant interaction effect between the downgrade event and a measure of state policy stringency.\n",
    "\n",
    "1.  **Load Data:** We will load the final analytical panel (`final_df`) created in the previous notebook and the new, manually collected state-level environmental policy data.\n",
    "2.  **Merge Policy Data:** We will merge the state policy information with our main panel based on the company's headquarter state and the observation year.\n",
    "3.  **Construct Variables:** We will create the necessary dummy and interaction variables for our regression model.\n",
    "4.  **Run Panel Regressions:** We will estimate a firm-level panel regression model to test the significance of the interaction term, controlling for standard risk factors.\n",
    "5.  **Interpret Results:** We will analyze the coefficient of the interaction term to confirm or reject our hypothesis.\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## üìö Initial Setup: Import Libraries\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "\n",
    "This cell imports all necessary libraries for data manipulation, regression analysis, and visualization.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import statsmodels.api as sm\n",
    "from statsmodels.formula.api import ols\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "import warnings\n",
    "\n",
    "warnings.filterwarnings('ignore')\n",
    "\n",
    "# Set display and plotting options for a clean look\n",
    "pd.set_option('display.max_columns', None)\n",
    "pd.set_option('display.width', 1000)\n",
    "plt.style.use('seaborn-v0_8-whitegrid')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 1. Load & Verify the Final Analytical Panel üìÇ\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "\n",
    "Our first step is to load the clean, merged dataset we created and saved from the previous replication notebook (`ERD.ipynb`). This file, `final_analytical_dataframe.csv`, contains all the necessary firm-month observations, including stock returns, ESG data, and risk factors. We will perform a quick check to ensure it loaded correctly.\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "--- Successfully loaded the final analytical dataframe ---\n",
      "\n",
      "Dataset Shape: (480285, 26)\n",
      "\n",
      "Data Info and Types:\n",
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 480285 entries, 0 to 480284\n",
      "Data columns (total 26 columns):\n",
      " #   Column                          Non-Null Count   Dtype         \n",
      "---  ------                          --------------   -----         \n",
      " 0   cusip                           480285 non-null  object        \n",
      " 1   date                            480285 non-null  datetime64[ns]\n",
      " 2   mth_ret                         480285 non-null  float64       \n",
      " 3   mktcap_lag                      480247 non-null  float64       \n",
      " 4   state_abbr                      449877 non-null  object        \n",
      " 5   cusip8                          480285 non-null  object        \n",
      " 6   entityid                        453748 non-null  float64       \n",
      " 7   field_date                      453748 non-null  datetime64[ns]\n",
      " 8   esg_risk_score                  385980 non-null  float64       \n",
      " 9   esg_risk_category               480285 non-null  object        \n",
      " 10  esg_risk_category_numeric       480285 non-null  float64       \n",
      " 11  score_change                    480285 non-null  float64       \n",
      " 12  score_direction                 480285 non-null  object        \n",
      " 13  bulk_update                     480285 non-null  float64       \n",
      " 14  CUSIP                           453748 non-null  object        \n",
      " 15  Ticker                          453748 non-null  object        \n",
      " 16  ISIN                            453748 non-null  object        \n",
      " 17  Country                         453748 non-null  object        \n",
      " 18  Region                          453748 non-null  object        \n",
      " 19  mkt_rf                          480285 non-null  float64       \n",
      " 20  smb                             480285 non-null  float64       \n",
      " 21  hml                             480285 non-null  float64       \n",
      " 22  rf                              480285 non-null  float64       \n",
      " 23  mom                             480285 non-null  float64       \n",
      " 24  ex_ret                          480285 non-null  float64       \n",
      " 25  prev_esg_risk_category_numeric  475498 non-null  float64       \n",
      "dtypes: datetime64[ns](2), float64(14), object(10)\n",
      "memory usage: 95.3+ MB\n",
      "\n",
      "First 5 rows of the loaded data:\n"
     ]
    },
    {
     "data": {
      "application/vnd.microsoft.datawrangler.viewer.v0+json": {
       "columns": [
        {
         "name": "index",
         "rawType": "int64",
         "type": "integer"
        },
        {
         "name": "cusip",
         "rawType": "object",
         "type": "string"
        },
        {
         "name": "date",
         "rawType": "datetime64[ns]",
         "type": "datetime"
        },
        {
         "name": "mth_ret",
         "rawType": "float64",
         "type": "float"
        },
        {
         "name": "mktcap_lag",
         "rawType": "float64",
         "type": "float"
        },
        {
         "name": "state_abbr",
         "rawType": "object",
         "type": "string"
        },
        {
         "name": "cusip8",
         "rawType": "object",
         "type": "string"
        },
        {
         "name": "entityid",
         "rawType": "float64",
         "type": "float"
        },
        {
         "name": "field_date",
         "rawType": "datetime64[ns]",
         "type": "datetime"
        },
        {
         "name": "esg_risk_score",
         "rawType": "float64",
         "type": "float"
        },
        {
         "name": "esg_risk_category",
         "rawType": "object",
         "type": "string"
        },
        {
         "name": "esg_risk_category_numeric",
         "rawType": "float64",
         "type": "float"
        },
        {
         "name": "score_change",
         "rawType": "float64",
         "type": "float"
        },
        {
         "name": "score_direction",
         "rawType": "object",
         "type": "string"
        },
        {
         "name": "bulk_update",
         "rawType": "float64",
         "type": "float"
        },
        {
         "name": "CUSIP",
         "rawType": "object",
         "type": "string"
        },
        {
         "name": "Ticker",
         "rawType": "object",
         "type": "string"
        },
        {
         "name": "ISIN",
         "rawType": "object",
         "type": "string"
        },
        {
         "name": "Country",
         "rawType": "object",
         "type": "string"
        },
        {
         "name": "Region",
         "rawType": "object",
         "type": "string"
        },
        {
         "name": "mkt_rf",
         "rawType": "float64",
         "type": "float"
        },
        {
         "name": "smb",
         "rawType": "float64",
         "type": "float"
        },
        {
         "name": "hml",
         "rawType": "float64",
         "type": "float"
        },
        {
         "name": "rf",
         "rawType": "float64",
         "type": "float"
        },
        {
         "name": "mom",
         "rawType": "float64",
         "type": "float"
        },
        {
         "name": "ex_ret",
         "rawType": "float64",
         "type": "float"
        },
        {
         "name": "prev_esg_risk_category_numeric",
         "rawType": "float64",
         "type": "float"
        }
       ],
       "ref": "7d5547c4-3c94-494e-9ee6-b64b70dca8a6",
       "rows": [
        [
         "0",
         "00030710",
         "2014-10-31 00:00:00",
         "0.177297",
         "382450.5",
         "TN",
         "00030710",
         "1270625413.0",
         "2014-10-01 00:00:00",
         "38.1777016491",
         "High",
         "4.0",
         "0.0",
         "No Change",
         "0.0",
         "000307108",
         "AAC",
         "US0003071083",
         "United States",
         "United States and Canada",
         "0.0250999999999999",
         "0.0405",
         "-0.0163",
         "0.0",
         "-0.0021",
         "0.177297",
         null
        ],
        [
         "1",
         "00030710",
         "2014-11-30 00:00:00",
         "0.325069",
         "450257.94",
         "TN",
         "00030710",
         "1270625413.0",
         "2014-11-01 00:00:00",
         "38.1777016491",
         "High",
         "4.0",
         "0.0",
         "No Change",
         "0.0",
         "000307108",
         "AAC",
         "US0003071083",
         "United States",
         "United States and Canada",
         "0.0256",
         "-0.0204999999999999",
         "-0.0313",
         "0.0",
         "0.0069",
         "0.325069",
         "4.0"
        ],
        [
         "2",
         "00030710",
         "2014-12-31 00:00:00",
         "0.071379",
         "608397.66",
         "TN",
         "00030710",
         "1270625413.0",
         "2014-12-01 00:00:00",
         "38.1777016491",
         "High",
         "4.0",
         "0.0",
         "No Change",
         "0.0",
         "000307108",
         "AAC",
         "US0003071083",
         "United States",
         "United States and Canada",
         "-0.0005",
         "0.0253",
         "0.0212",
         "0.0",
         "0.0103",
         "0.071379",
         "4.0"
        ],
        [
         "3",
         "00030710",
         "2015-01-31 00:00:00",
         "-0.174644",
         "651824.52",
         "TN",
         "00030710",
         "1270625413.0",
         "2015-01-01 00:00:00",
         "38.1777016491",
         "High",
         "4.0",
         "0.0",
         "No Change",
         "0.0",
         "000307108",
         "AAC",
         "US0003071083",
         "United States",
         "United States and Canada",
         "-0.031",
         "-0.0059",
         "-0.0345",
         "0.0",
         "0.0374",
         "-0.174644",
         "4.0"
        ],
        [
         "4",
         "00030710",
         "2015-02-28 00:00:00",
         "0.410266",
         "537987.12",
         "TN",
         "00030710",
         "1270625413.0",
         "2015-02-01 00:00:00",
         "38.1777016491",
         "High",
         "4.0",
         "0.0",
         "No Change",
         "0.0",
         "000307108",
         "AAC",
         "US0003071083",
         "United States",
         "United States and Canada",
         "0.0613",
         "0.0060999999999999",
         "-0.0179",
         "0.0",
         "-0.031",
         "0.410266",
         "4.0"
        ]
       ],
       "shape": {
        "columns": 26,
        "rows": 5
       }
      },
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>cusip</th>\n",
       "      <th>date</th>\n",
       "      <th>mth_ret</th>\n",
       "      <th>mktcap_lag</th>\n",
       "      <th>state_abbr</th>\n",
       "      <th>cusip8</th>\n",
       "      <th>entityid</th>\n",
       "      <th>field_date</th>\n",
       "      <th>esg_risk_score</th>\n",
       "      <th>esg_risk_category</th>\n",
       "      <th>esg_risk_category_numeric</th>\n",
       "      <th>score_change</th>\n",
       "      <th>score_direction</th>\n",
       "      <th>bulk_update</th>\n",
       "      <th>CUSIP</th>\n",
       "      <th>Ticker</th>\n",
       "      <th>ISIN</th>\n",
       "      <th>Country</th>\n",
       "      <th>Region</th>\n",
       "      <th>mkt_rf</th>\n",
       "      <th>smb</th>\n",
       "      <th>hml</th>\n",
       "      <th>rf</th>\n",
       "      <th>mom</th>\n",
       "      <th>ex_ret</th>\n",
       "      <th>prev_esg_risk_category_numeric</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>00030710</td>\n",
       "      <td>2014-10-31</td>\n",
       "      <td>0.177297</td>\n",
       "      <td>382450.50</td>\n",
       "      <td>TN</td>\n",
       "      <td>00030710</td>\n",
       "      <td>1.270625e+09</td>\n",
       "      <td>2014-10-01</td>\n",
       "      <td>38.177702</td>\n",
       "      <td>High</td>\n",
       "      <td>4.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>No Change</td>\n",
       "      <td>0.0</td>\n",
       "      <td>000307108</td>\n",
       "      <td>AAC</td>\n",
       "      <td>US0003071083</td>\n",
       "      <td>United States</td>\n",
       "      <td>United States and Canada</td>\n",
       "      <td>0.0251</td>\n",
       "      <td>0.0405</td>\n",
       "      <td>-0.0163</td>\n",
       "      <td>0.0</td>\n",
       "      <td>-0.0021</td>\n",
       "      <td>0.177297</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>00030710</td>\n",
       "      <td>2014-11-30</td>\n",
       "      <td>0.325069</td>\n",
       "      <td>450257.94</td>\n",
       "      <td>TN</td>\n",
       "      <td>00030710</td>\n",
       "      <td>1.270625e+09</td>\n",
       "      <td>2014-11-01</td>\n",
       "      <td>38.177702</td>\n",
       "      <td>High</td>\n",
       "      <td>4.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>No Change</td>\n",
       "      <td>0.0</td>\n",
       "      <td>000307108</td>\n",
       "      <td>AAC</td>\n",
       "      <td>US0003071083</td>\n",
       "      <td>United States</td>\n",
       "      <td>United States and Canada</td>\n",
       "      <td>0.0256</td>\n",
       "      <td>-0.0205</td>\n",
       "      <td>-0.0313</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0069</td>\n",
       "      <td>0.325069</td>\n",
       "      <td>4.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>00030710</td>\n",
       "      <td>2014-12-31</td>\n",
       "      <td>0.071379</td>\n",
       "      <td>608397.66</td>\n",
       "      <td>TN</td>\n",
       "      <td>00030710</td>\n",
       "      <td>1.270625e+09</td>\n",
       "      <td>2014-12-01</td>\n",
       "      <td>38.177702</td>\n",
       "      <td>High</td>\n",
       "      <td>4.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>No Change</td>\n",
       "      <td>0.0</td>\n",
       "      <td>000307108</td>\n",
       "      <td>AAC</td>\n",
       "      <td>US0003071083</td>\n",
       "      <td>United States</td>\n",
       "      <td>United States and Canada</td>\n",
       "      <td>-0.0005</td>\n",
       "      <td>0.0253</td>\n",
       "      <td>0.0212</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0103</td>\n",
       "      <td>0.071379</td>\n",
       "      <td>4.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>00030710</td>\n",
       "      <td>2015-01-31</td>\n",
       "      <td>-0.174644</td>\n",
       "      <td>651824.52</td>\n",
       "      <td>TN</td>\n",
       "      <td>00030710</td>\n",
       "      <td>1.270625e+09</td>\n",
       "      <td>2015-01-01</td>\n",
       "      <td>38.177702</td>\n",
       "      <td>High</td>\n",
       "      <td>4.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>No Change</td>\n",
       "      <td>0.0</td>\n",
       "      <td>000307108</td>\n",
       "      <td>AAC</td>\n",
       "      <td>US0003071083</td>\n",
       "      <td>United States</td>\n",
       "      <td>United States and Canada</td>\n",
       "      <td>-0.0310</td>\n",
       "      <td>-0.0059</td>\n",
       "      <td>-0.0345</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0374</td>\n",
       "      <td>-0.174644</td>\n",
       "      <td>4.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>00030710</td>\n",
       "      <td>2015-02-28</td>\n",
       "      <td>0.410266</td>\n",
       "      <td>537987.12</td>\n",
       "      <td>TN</td>\n",
       "      <td>00030710</td>\n",
       "      <td>1.270625e+09</td>\n",
       "      <td>2015-02-01</td>\n",
       "      <td>38.177702</td>\n",
       "      <td>High</td>\n",
       "      <td>4.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>No Change</td>\n",
       "      <td>0.0</td>\n",
       "      <td>000307108</td>\n",
       "      <td>AAC</td>\n",
       "      <td>US0003071083</td>\n",
       "      <td>United States</td>\n",
       "      <td>United States and Canada</td>\n",
       "      <td>0.0613</td>\n",
       "      <td>0.0061</td>\n",
       "      <td>-0.0179</td>\n",
       "      <td>0.0</td>\n",
       "      <td>-0.0310</td>\n",
       "      <td>0.410266</td>\n",
       "      <td>4.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      cusip       date   mth_ret  mktcap_lag state_abbr    cusip8      entityid field_date  esg_risk_score esg_risk_category  esg_risk_category_numeric  score_change score_direction  bulk_update      CUSIP Ticker          ISIN        Country                    Region  mkt_rf     smb     hml   rf     mom    ex_ret  prev_esg_risk_category_numeric\n",
       "0  00030710 2014-10-31  0.177297   382450.50         TN  00030710  1.270625e+09 2014-10-01       38.177702              High                        4.0           0.0       No Change          0.0  000307108    AAC  US0003071083  United States  United States and Canada  0.0251  0.0405 -0.0163  0.0 -0.0021  0.177297                             NaN\n",
       "1  00030710 2014-11-30  0.325069   450257.94         TN  00030710  1.270625e+09 2014-11-01       38.177702              High                        4.0           0.0       No Change          0.0  000307108    AAC  US0003071083  United States  United States and Canada  0.0256 -0.0205 -0.0313  0.0  0.0069  0.325069                             4.0\n",
       "2  00030710 2014-12-31  0.071379   608397.66         TN  00030710  1.270625e+09 2014-12-01       38.177702              High                        4.0           0.0       No Change          0.0  000307108    AAC  US0003071083  United States  United States and Canada -0.0005  0.0253  0.0212  0.0  0.0103  0.071379                             4.0\n",
       "3  00030710 2015-01-31 -0.174644   651824.52         TN  00030710  1.270625e+09 2015-01-01       38.177702              High                        4.0           0.0       No Change          0.0  000307108    AAC  US0003071083  United States  United States and Canada -0.0310 -0.0059 -0.0345  0.0  0.0374 -0.174644                             4.0\n",
       "4  00030710 2015-02-28  0.410266   537987.12         TN  00030710  1.270625e+09 2015-02-01       38.177702              High                        4.0           0.0       No Change          0.0  000307108    AAC  US0003071083  United States  United States and Canada  0.0613  0.0061 -0.0179  0.0 -0.0310  0.410266                             4.0"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Define the file path\n",
    "panel_data_path = \"final_analytical_dataframe.csv\"\n",
    "\n",
    "# Load the dataset. It's crucial to parse the 'date' column correctly.\n",
    "try:\n",
    "    final_df = pd.read_csv(panel_data_path, parse_dates=['date', 'field_date'])\n",
    "    print(\"--- Successfully loaded the final analytical dataframe ---\")\n",
    "    \n",
    "    # --- Verification Checks ---\n",
    "    print(f\"\\nDataset Shape: {final_df.shape}\")\n",
    "    print(\"\\nData Info and Types:\")\n",
    "    final_df.info()\n",
    "    \n",
    "    print(\"\\nFirst 5 rows of the loaded data:\")\n",
    "    display(final_df.head())\n",
    "    \n",
    "except FileNotFoundError:\n",
    "    print(f\"--- ERROR: The file was not found at '{panel_data_path}' ---\")\n",
    "    print(\"Please make sure you have run the previous notebook (ERD.ipynb) and saved the final dataframe.\")\n",
    "    final_df = pd.DataFrame() # Create an empty df to prevent further errors"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 2. Load and Merge State Policy Data üèõÔ∏è\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Having loaded our primary financial and ESG data, the next critical step is to integrate our measure of state-level environmental policy stringency. We will use the **ACEEE State Energy Efficiency Scorecard rankings** as a proxy for this policy environment."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Methodology for Handling Policy Data\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The ACEEE Scorecard is published biennially, resulting in data gaps for intermittent years (e.g., 2021, 2023). To create a continuous annual panel of policy data, we will employ a **forward-fill** methodology. This means that for any year without a new report, we will carry forward the rank from the most recent prior year. This approach is standard practice for slowly-evolving variables and avoids look-ahead bias by ensuring we only use information that was publicly available at that point in time.\n",
    "\n",
    "The process is as follows:\n",
    "1.  **Load** the `state_policy_rankings.csv` file containing the rankings you compiled.\n",
    "2.  **Create a complete annual panel** for every state and every year in our sample's time frame.\n",
    "3.  **Forward-fill (`ffill`)** the ranking and policy strength indicator columns to fill the gaps for the missing years.\n",
    "4.  **Acquire and merge state-of-headquarters data.** This is a critical data acquisition step to link each firm (by `cusip8`) to its home state.\n",
    "5.  **Merge** the complete, forward-filled policy data into our main `final_df` dataframe based on the firm's state and the observation year."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "--- Successfully loaded the ACEEE state policy rankings ---\n",
      "\n",
      "Raw Dataset Shape: (816, 9)\n",
      "\n",
      "Years covered in raw data: [np.int64(2007), np.int64(2008), np.int64(2009), np.int64(2010), np.int64(2011), np.int64(2012), np.int64(2013), np.int64(2014), np.int64(2015), np.int64(2016), np.int64(2017), np.int64(2018), np.int64(2019), np.int64(2020), np.int64(2022), np.int64(2025)]\n",
      "\n",
      "First 5 rows of the loaded policy data:\n"
     ]
    },
    {
     "data": {
      "application/vnd.microsoft.datawrangler.viewer.v0+json": {
       "columns": [
        {
         "name": "index",
         "rawType": "int64",
         "type": "integer"
        },
        {
         "name": "State",
         "rawType": "object",
         "type": "string"
        },
        {
         "name": "Year",
         "rawType": "int64",
         "type": "integer"
        },
        {
         "name": "Rank",
         "rawType": "int64",
         "type": "integer"
        },
        {
         "name": "State_Abbrev",
         "rawType": "object",
         "type": "string"
        },
        {
         "name": "Strong_Policy_Top10",
         "rawType": "int64",
         "type": "integer"
        },
        {
         "name": "Strong_Policy_Top15",
         "rawType": "int64",
         "type": "integer"
        },
        {
         "name": "Strong_Policy_Top20",
         "rawType": "int64",
         "type": "integer"
        },
        {
         "name": "Policy_Quartile",
         "rawType": "object",
         "type": "string"
        },
        {
         "name": "Strong_Policy_Binary",
         "rawType": "object",
         "type": "string"
        }
       ],
       "ref": "084fe4dc-3310-48b8-8c49-d968073d6d2b",
       "rows": [
        [
         "0",
         "Vermont",
         "2007",
         "1",
         "VT",
         "1",
         "1",
         "1",
         "Q1_Strongest",
         "Strong"
        ],
        [
         "1",
         "Connecticut",
         "2007",
         "1",
         "CT",
         "1",
         "1",
         "1",
         "Q1_Strongest",
         "Strong"
        ],
        [
         "2",
         "California",
         "2007",
         "3",
         "CA",
         "1",
         "1",
         "1",
         "Q1_Strongest",
         "Strong"
        ],
        [
         "3",
         "Massachusetts",
         "2007",
         "4",
         "MA",
         "1",
         "1",
         "1",
         "Q1_Strongest",
         "Strong"
        ],
        [
         "4",
         "Oregon",
         "2007",
         "5",
         "OR",
         "1",
         "1",
         "1",
         "Q1_Strongest",
         "Strong"
        ]
       ],
       "shape": {
        "columns": 9,
        "rows": 5
       }
      },
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>State</th>\n",
       "      <th>Year</th>\n",
       "      <th>Rank</th>\n",
       "      <th>State_Abbrev</th>\n",
       "      <th>Strong_Policy_Top10</th>\n",
       "      <th>Strong_Policy_Top15</th>\n",
       "      <th>Strong_Policy_Top20</th>\n",
       "      <th>Policy_Quartile</th>\n",
       "      <th>Strong_Policy_Binary</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Vermont</td>\n",
       "      <td>2007</td>\n",
       "      <td>1</td>\n",
       "      <td>VT</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Q1_Strongest</td>\n",
       "      <td>Strong</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Connecticut</td>\n",
       "      <td>2007</td>\n",
       "      <td>1</td>\n",
       "      <td>CT</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Q1_Strongest</td>\n",
       "      <td>Strong</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>California</td>\n",
       "      <td>2007</td>\n",
       "      <td>3</td>\n",
       "      <td>CA</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Q1_Strongest</td>\n",
       "      <td>Strong</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Massachusetts</td>\n",
       "      <td>2007</td>\n",
       "      <td>4</td>\n",
       "      <td>MA</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Q1_Strongest</td>\n",
       "      <td>Strong</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Oregon</td>\n",
       "      <td>2007</td>\n",
       "      <td>5</td>\n",
       "      <td>OR</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Q1_Strongest</td>\n",
       "      <td>Strong</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "           State  Year  Rank State_Abbrev  Strong_Policy_Top10  Strong_Policy_Top15  Strong_Policy_Top20 Policy_Quartile Strong_Policy_Binary\n",
       "0        Vermont  2007     1           VT                    1                    1                    1    Q1_Strongest               Strong\n",
       "1    Connecticut  2007     1           CT                    1                    1                    1    Q1_Strongest               Strong\n",
       "2     California  2007     3           CA                    1                    1                    1    Q1_Strongest               Strong\n",
       "3  Massachusetts  2007     4           MA                    1                    1                    1    Q1_Strongest               Strong\n",
       "4         Oregon  2007     5           OR                    1                    1                    1    Q1_Strongest               Strong"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "policy_data_path = \"state_policy_rankings.csv\"\n",
    "\n",
    "try:\n",
    "    state_policy_df = pd.read_csv(policy_data_path)\n",
    "    print(\"--- Successfully loaded the ACEEE state policy rankings ---\")\n",
    "    \n",
    "    # --- Verification Checks ---\n",
    "    print(f\"\\nRaw Dataset Shape: {state_policy_df.shape}\")\n",
    "    print(\"\\nYears covered in raw data:\", sorted(state_policy_df['Year'].unique()))\n",
    "    \n",
    "    print(\"\\nFirst 5 rows of the loaded policy data:\")\n",
    "    display(state_policy_df.head())\n",
    "    \n",
    "except FileNotFoundError:\n",
    "    print(f\"--- ERROR: The file '{policy_data_path}' was not found. ---\")\n",
    "    print(\"Please ensure you have created and saved the state policy rankings CSV file.\")\n",
    "    state_policy_df = pd.DataFrame() # Create an empty df to prevent further errors"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now, we address the missing years by creating a complete panel and forward-filling the values."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "--- Forward-filled State Policy Data ---\n",
      "Shape after forward-filling: (765, 9)\n",
      "\n",
      "Verifying the fill for California (note how 2021 is filled with 2020 data):\n"
     ]
    },
    {
     "data": {
      "application/vnd.microsoft.datawrangler.viewer.v0+json": {
       "columns": [
        {
         "name": "index",
         "rawType": "int64",
         "type": "integer"
        },
        {
         "name": "State_Abbrev",
         "rawType": "object",
         "type": "string"
        },
        {
         "name": "Year",
         "rawType": "int64",
         "type": "integer"
        },
        {
         "name": "State",
         "rawType": "object",
         "type": "string"
        },
        {
         "name": "Rank",
         "rawType": "float64",
         "type": "float"
        },
        {
         "name": "Strong_Policy_Top10",
         "rawType": "float64",
         "type": "float"
        },
        {
         "name": "Strong_Policy_Top15",
         "rawType": "float64",
         "type": "float"
        },
        {
         "name": "Strong_Policy_Top20",
         "rawType": "float64",
         "type": "float"
        },
        {
         "name": "Policy_Quartile",
         "rawType": "object",
         "type": "string"
        },
        {
         "name": "Strong_Policy_Binary",
         "rawType": "object",
         "type": "string"
        }
       ],
       "ref": "475c0054-0dbb-47e6-a1a6-a0af52452d7a",
       "rows": [
        [
         "39",
         "CA",
         "2019",
         "California",
         "2.0",
         "1.0",
         "1.0",
         "1.0",
         "Q1_Strongest",
         "Strong"
        ],
        [
         "40",
         "CA",
         "2020",
         "California",
         "1.0",
         "1.0",
         "1.0",
         "1.0",
         "Q1_Strongest",
         "Strong"
        ],
        [
         "41",
         "CA",
         "2021",
         "California",
         "1.0",
         "1.0",
         "1.0",
         "1.0",
         "Q1_Strongest",
         "Strong"
        ],
        [
         "42",
         "CA",
         "2022",
         "California",
         "1.0",
         "1.0",
         "1.0",
         "1.0",
         "Q1_Strongest",
         "Strong"
        ],
        [
         "43",
         "CA",
         "2023",
         "California",
         "1.0",
         "1.0",
         "1.0",
         "1.0",
         "Q1_Strongest",
         "Strong"
        ],
        [
         "44",
         "CA",
         "2024",
         "California",
         "1.0",
         "1.0",
         "1.0",
         "1.0",
         "Q1_Strongest",
         "Strong"
        ]
       ],
       "shape": {
        "columns": 9,
        "rows": 6
       }
      },
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>State_Abbrev</th>\n",
       "      <th>Year</th>\n",
       "      <th>State</th>\n",
       "      <th>Rank</th>\n",
       "      <th>Strong_Policy_Top10</th>\n",
       "      <th>Strong_Policy_Top15</th>\n",
       "      <th>Strong_Policy_Top20</th>\n",
       "      <th>Policy_Quartile</th>\n",
       "      <th>Strong_Policy_Binary</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>39</th>\n",
       "      <td>CA</td>\n",
       "      <td>2019</td>\n",
       "      <td>California</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>Q1_Strongest</td>\n",
       "      <td>Strong</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>40</th>\n",
       "      <td>CA</td>\n",
       "      <td>2020</td>\n",
       "      <td>California</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>Q1_Strongest</td>\n",
       "      <td>Strong</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>41</th>\n",
       "      <td>CA</td>\n",
       "      <td>2021</td>\n",
       "      <td>California</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>Q1_Strongest</td>\n",
       "      <td>Strong</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>42</th>\n",
       "      <td>CA</td>\n",
       "      <td>2022</td>\n",
       "      <td>California</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>Q1_Strongest</td>\n",
       "      <td>Strong</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>43</th>\n",
       "      <td>CA</td>\n",
       "      <td>2023</td>\n",
       "      <td>California</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>Q1_Strongest</td>\n",
       "      <td>Strong</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>44</th>\n",
       "      <td>CA</td>\n",
       "      <td>2024</td>\n",
       "      <td>California</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>Q1_Strongest</td>\n",
       "      <td>Strong</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   State_Abbrev  Year       State  Rank  Strong_Policy_Top10  Strong_Policy_Top15  Strong_Policy_Top20 Policy_Quartile Strong_Policy_Binary\n",
       "39           CA  2019  California   2.0                  1.0                  1.0                  1.0    Q1_Strongest               Strong\n",
       "40           CA  2020  California   1.0                  1.0                  1.0                  1.0    Q1_Strongest               Strong\n",
       "41           CA  2021  California   1.0                  1.0                  1.0                  1.0    Q1_Strongest               Strong\n",
       "42           CA  2022  California   1.0                  1.0                  1.0                  1.0    Q1_Strongest               Strong\n",
       "43           CA  2023  California   1.0                  1.0                  1.0                  1.0    Q1_Strongest               Strong\n",
       "44           CA  2024  California   1.0                  1.0                  1.0                  1.0    Q1_Strongest               Strong"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "if not state_policy_df.empty:\n",
    "    # Determine the full range of states and years needed\n",
    "    all_states = state_policy_df['State_Abbrev'].unique()\n",
    "    # We create a year column in final_df to get the full time range of our study\n",
    "    final_df['year'] = final_df['date'].dt.year\n",
    "    all_years = pd.RangeIndex(start=final_df['year'].min(), stop=final_df['year'].max() + 1, name='Year')\n",
    "\n",
    "    # Create a complete multi-index with every state for every year\n",
    "    multi_index = pd.MultiIndex.from_product([all_states, all_years], names=['State_Abbrev', 'Year'])\n",
    "\n",
    "    # Reindex our policy dataframe to this complete index. This creates rows with NaNs for missing years.\n",
    "    state_policy_df_complete = state_policy_df.set_index(['State_Abbrev', 'Year']).reindex(multi_index).reset_index()\n",
    "\n",
    "    # Group by each state and forward-fill the NaNs\n",
    "    policy_cols_to_fill = ['State', 'Rank', 'Strong_Policy_Top10', 'Strong_Policy_Top15', 'Strong_Policy_Top20', 'Policy_Quartile', 'Strong_Policy_Binary']\n",
    "    state_policy_df_filled_cols = state_policy_df_complete.groupby('State_Abbrev')[policy_cols_to_fill].ffill()\n",
    "\n",
    "    # Combine the filled columns back with the index columns\n",
    "    state_policy_df_final = pd.concat([state_policy_df_complete[['State_Abbrev', 'Year']], state_policy_df_filled_cols], axis=1)\n",
    "\n",
    "    # --- Verification ---\n",
    "    print(\"--- Forward-filled State Policy Data ---\")\n",
    "    print(f\"Shape after forward-filling: {state_policy_df_final.shape}\")\n",
    "    print(\"\\nVerifying the fill for California (note how 2021 is filled with 2020 data):\")\n",
    "    display(state_policy_df_final[state_policy_df_final['State_Abbrev'] == 'CA'].tail(6))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Analysis of the Output:**\n",
    "\n",
    "*   **Forward-Fill Success:** The verification for California clearly shows the logic worked. The rank from 2020 (Rank 1.0) was correctly carried forward to fill the `NaN` for 2021. The same happened for 2023 and 2024, which were filled with the 2022 rank. This is exactly what we needed.\n",
    "*   **Ready to Merge:** This clean, filled `state_policy_df_final` is now ready to be merged into your main analytical dataframe.\n",
    "\n",
    "Since you we already successfully added the `state_abbr` column to `final_df`, we can now confidently proceed with the final merge."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "# We already have `final_df` with the 'state_abbr' and 'year' columns from the first notebook.\n",
    "# Now we merge with our new, complete policy dataframe.\n",
    "final_df_with_policy = pd.merge(\n",
    "    final_df,\n",
    "    state_policy_df_final,\n",
    "    left_on=['state_abbr', 'year'],\n",
    "    right_on=['State_Abbrev', 'Year'],\n",
    "    how='left'  # Use a left merge to keep all firm observations\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Clean up redundant/unnecessary columns from the merge\n",
    "columns_to_drop = ['State', 'State_Abbrev', 'Year']\n",
    "final_df_with_policy.drop(columns=columns_to_drop, inplace=True, errors='ignore')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "--- Successfully Merged State Policy Data ---\n",
      "Shape of final panel with policy data: (480285, 33)\n",
      "\n",
      "Columns now include policy ranks:\n"
     ]
    },
    {
     "data": {
      "application/vnd.microsoft.datawrangler.viewer.v0+json": {
       "columns": [
        {
         "name": "index",
         "rawType": "int64",
         "type": "integer"
        },
        {
         "name": "cusip8",
         "rawType": "object",
         "type": "string"
        },
        {
         "name": "date",
         "rawType": "datetime64[ns]",
         "type": "datetime"
        },
        {
         "name": "state_abbr",
         "rawType": "object",
         "type": "string"
        },
        {
         "name": "Rank",
         "rawType": "float64",
         "type": "float"
        },
        {
         "name": "Strong_Policy_Top10",
         "rawType": "float64",
         "type": "float"
        }
       ],
       "ref": "0e0bf905-bc4c-4f6d-a59e-2b8b2687ad2e",
       "rows": [
        [
         "0",
         "00030710",
         "2014-10-31 00:00:00",
         "TN",
         "38.0",
         "0.0"
        ],
        [
         "1",
         "00030710",
         "2014-11-30 00:00:00",
         "TN",
         "38.0",
         "0.0"
        ],
        [
         "2",
         "00030710",
         "2014-12-31 00:00:00",
         "TN",
         "38.0",
         "0.0"
        ],
        [
         "3",
         "00030710",
         "2015-01-31 00:00:00",
         "TN",
         "31.0",
         "0.0"
        ],
        [
         "4",
         "00030710",
         "2015-02-28 00:00:00",
         "TN",
         "31.0",
         "0.0"
        ]
       ],
       "shape": {
        "columns": 5,
        "rows": 5
       }
      },
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>cusip8</th>\n",
       "      <th>date</th>\n",
       "      <th>state_abbr</th>\n",
       "      <th>Rank</th>\n",
       "      <th>Strong_Policy_Top10</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>00030710</td>\n",
       "      <td>2014-10-31</td>\n",
       "      <td>TN</td>\n",
       "      <td>38.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>00030710</td>\n",
       "      <td>2014-11-30</td>\n",
       "      <td>TN</td>\n",
       "      <td>38.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>00030710</td>\n",
       "      <td>2014-12-31</td>\n",
       "      <td>TN</td>\n",
       "      <td>38.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>00030710</td>\n",
       "      <td>2015-01-31</td>\n",
       "      <td>TN</td>\n",
       "      <td>31.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>00030710</td>\n",
       "      <td>2015-02-28</td>\n",
       "      <td>TN</td>\n",
       "      <td>31.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     cusip8       date state_abbr  Rank  Strong_Policy_Top10\n",
       "0  00030710 2014-10-31         TN  38.0                  0.0\n",
       "1  00030710 2014-11-30         TN  38.0                  0.0\n",
       "2  00030710 2014-12-31         TN  38.0                  0.0\n",
       "3  00030710 2015-01-31         TN  31.0                  0.0\n",
       "4  00030710 2015-02-28         TN  31.0                  0.0"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Number of firm-month observations with missing Rank data: 46916 (out of 480285)\n",
      "Note: Missing ranks can occur if a firm's state is not in the ACEEE data (e.g., non-US firms) or from merge issues.\n"
     ]
    }
   ],
   "source": [
    "# --- Verification ---\n",
    "print(\"\\n--- Successfully Merged State Policy Data ---\")\n",
    "print(f\"Shape of final panel with policy data: {final_df_with_policy.shape}\")\n",
    "print(\"\\nColumns now include policy ranks:\")\n",
    "\n",
    "# Display key columns including the newly merged ones\n",
    "display_cols = ['cusip8', 'date', 'state_abbr', 'Rank', 'Strong_Policy_Top10']\n",
    "display(final_df_with_policy[display_cols].head())\n",
    "\n",
    "# Check for missing policy data after the merge\n",
    "missing_ranks = final_df_with_policy['Rank'].isna().sum()\n",
    "print(f\"\\nNumber of firm-month observations with missing Rank data: {missing_ranks} (out of {len(final_df_with_policy)})\")\n",
    "if missing_ranks > 0:\n",
    "    print(\"Note: Missing ranks can occur if a firm's state is not in the ACEEE data (e.g., non-US firms) or from merge issues.\")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 3. Load and Merge RPS Policy Data ‚ôªÔ∏è"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now we will load the `state_rps_panel_1990_2024.csv` file you created. This provides our second, alternative measure of policy stringency. We will then merge it into our main analytical dataframe, which already contains the ACEEE rankings."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "--- Successfully loaded the RPS policy data ---\n",
      "\n",
      "--- Successfully Merged RPS Data into Main Panel ---\n",
      "Shape of final panel remains: (480285, 34)\n",
      "Observations with missing RPS data: 46916\n",
      "\n",
      "Displaying key columns with both policy measures:\n"
     ]
    },
    {
     "data": {
      "application/vnd.microsoft.datawrangler.viewer.v0+json": {
       "columns": [
        {
         "name": "index",
         "rawType": "int64",
         "type": "integer"
        },
        {
         "name": "cusip8",
         "rawType": "object",
         "type": "string"
        },
        {
         "name": "date",
         "rawType": "datetime64[ns]",
         "type": "datetime"
        },
        {
         "name": "state_abbr",
         "rawType": "object",
         "type": "string"
        },
        {
         "name": "Rank",
         "rawType": "float64",
         "type": "float"
        },
        {
         "name": "has_rps",
         "rawType": "float64",
         "type": "float"
        }
       ],
       "ref": "65a207de-dc6c-424d-801c-c230c063430a",
       "rows": [
        [
         "0",
         "00030710",
         "2014-10-31 00:00:00",
         "TN",
         "38.0",
         "1.0"
        ],
        [
         "1",
         "00030710",
         "2014-11-30 00:00:00",
         "TN",
         "38.0",
         "1.0"
        ],
        [
         "2",
         "00030710",
         "2014-12-31 00:00:00",
         "TN",
         "38.0",
         "1.0"
        ],
        [
         "3",
         "00030710",
         "2015-01-31 00:00:00",
         "TN",
         "31.0",
         "1.0"
        ],
        [
         "4",
         "00030710",
         "2015-02-28 00:00:00",
         "TN",
         "31.0",
         "1.0"
        ]
       ],
       "shape": {
        "columns": 5,
        "rows": 5
       }
      },
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>cusip8</th>\n",
       "      <th>date</th>\n",
       "      <th>state_abbr</th>\n",
       "      <th>Rank</th>\n",
       "      <th>has_rps</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>00030710</td>\n",
       "      <td>2014-10-31</td>\n",
       "      <td>TN</td>\n",
       "      <td>38.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>00030710</td>\n",
       "      <td>2014-11-30</td>\n",
       "      <td>TN</td>\n",
       "      <td>38.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>00030710</td>\n",
       "      <td>2014-12-31</td>\n",
       "      <td>TN</td>\n",
       "      <td>38.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>00030710</td>\n",
       "      <td>2015-01-31</td>\n",
       "      <td>TN</td>\n",
       "      <td>31.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>00030710</td>\n",
       "      <td>2015-02-28</td>\n",
       "      <td>TN</td>\n",
       "      <td>31.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     cusip8       date state_abbr  Rank  has_rps\n",
       "0  00030710 2014-10-31         TN  38.0      1.0\n",
       "1  00030710 2014-11-30         TN  38.0      1.0\n",
       "2  00030710 2014-12-31         TN  38.0      1.0\n",
       "3  00030710 2015-01-31         TN  31.0      1.0\n",
       "4  00030710 2015-02-28         TN  31.0      1.0"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Define the file path for the RPS data\n",
    "rps_data_path = \"state_rps_panel_1990_2024.csv\"\n",
    "\n",
    "try:\n",
    "    rps_df = pd.read_csv(rps_data_path)\n",
    "    print(\"--- Successfully loaded the RPS policy data ---\")\n",
    "    \n",
    "    # --- Merge RPS data into our main dataframe ---\n",
    "    # The keys are the state abbreviation and the year.\n",
    "    final_df_with_policy = pd.merge(\n",
    "        final_df_with_policy,\n",
    "        rps_df,\n",
    "        on=['state_abbr', 'year'],\n",
    "        how='left'\n",
    "    )\n",
    "\n",
    "    # --- Verification ---\n",
    "    print(\"\\n--- Successfully Merged RPS Data into Main Panel ---\")\n",
    "    print(f\"Shape of final panel remains: {final_df_with_policy.shape}\")\n",
    "    \n",
    "    # Check for missing RPS data after the merge\n",
    "    missing_rps = final_df_with_policy['has_rps'].isna().sum()\n",
    "    print(f\"Observations with missing RPS data: {missing_rps}\")\n",
    "\n",
    "    print(\"\\nDisplaying key columns with both policy measures:\")\n",
    "    display_cols = ['cusip8', 'date', 'state_abbr', 'Rank', 'has_rps']\n",
    "    display(final_df_with_policy[display_cols].head())\n",
    "\n",
    "except FileNotFoundError:\n",
    "    print(f\"--- ERROR: The file '{rps_data_path}' was not found. ---\")\n",
    "    print(\"Please make sure the RPS data CSV is in the same directory.\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 4. Constructing Variables for the Interaction Analysis  üîß\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "To test our hypothesis that state-level policy moderates the market's reaction to ESG downgrades, we will use a difference-in-differences style panel regression. This requires us to construct three key variables: a dummy for the downgrade event, a dummy for the policy environment, and an interaction term between the two.\n",
    "\n",
    "The full regression model we will estimate is:\n",
    "\n",
    "$$\n",
    "\\text{ex\\_ret}_{i,t} = \\alpha + \\beta_1 \\text{DowngradeEvent}_{i,t} + \\beta_2 \\text{StrongPolicy}_{i,t} + \\beta_3 (\\text{DowngradeEvent}_{i,t} \\times \\text{StrongPolicy}_{i,t}) + \\gamma' \\text{Controls}_{i,t} + \\epsilon_{i,t}\n",
    "$$\n",
    "\n",
    "Where:\n",
    "*   $\\text{ex\\_ret}_{i,t}$ is the excess return for firm `i` in month `t`.\n",
    "*   $\\text{DowngradeEvent}_{i,t}$ is a dummy variable equal to `1` for the 12 months following an ESG downgrade for firm `i`, and `0` otherwise. This captures the main effect of a downgrade.\n",
    "*   $\\text{StrongPolicy}_{i,t}$ is a dummy variable for the policy environment. We will test this using two different measures for robustness:\n",
    "    1.  **ACEEE Rank:** `1` if the firm's state is in the Top 10 of the ACEEE scorecard for that year, `0` otherwise.\n",
    "    2.  **RPS Mandate:** `1` if the firm's state has a mandatory RPS policy in place in that year, `0` otherwise.\n",
    "*   $(\\text{DowngradeEvent}_{i,t} \\times \\text{StrongPolicy}_{i,t})$ is our crucial **interaction term**.\n",
    "*   The coefficient **$\\beta_3$** is our primary interest. It measures the *additional* effect of a downgrade *specifically for firms in strong policy states*. Our hypothesis predicts that **$\\beta_3$ will be negative and statistically significant.**\n",
    "*   $\\text{Controls}_{i,t}$ represents the set of Fama-French-Carhart factors (`mkt_rf`, `smb`, `hml`, `mom`) to control for systematic market risks.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Create a dataframe of just the downgrade events\n",
    "downgrade_events = final_df[final_df['score_direction'] == 'Downgrade'][['cusip8', 'date']].drop_duplicates()\n",
    "downgrade_events.rename(columns={'date': 'event_date'}, inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Merge these event dates into our main dataframe\n",
    "# We use a left merge to keep all firm-month observations\n",
    "analysis_df = pd.merge(final_df_with_policy, downgrade_events, on='cusip8', how='left')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Create the 'Downgrade_Event' flag\n",
    "# It's 1 if the observation date is within 12 months of any of the firm's downgrade event dates\n",
    "analysis_df['Downgrade_Event'] = (\n",
    "    (analysis_df['date'] >= analysis_df['event_date']) &\n",
    "    (analysis_df['date'] < (analysis_df['event_date'] + pd.DateOffset(months=12)))\n",
    ").astype(int)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "# A firm can have multiple downgrades. We group by firm-month and take the max()\n",
    "# This ensures the flag stays 1 if holding periods overlap.\n",
    "analysis_df['Downgrade_Event'] = analysis_df.groupby(['cusip8', 'date'])['Downgrade_Event'].transform('max')\n",
    "\n",
    "# Drop duplicates created by the merge\n",
    "analysis_df.drop_duplicates(subset=['cusip8', 'date'], inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "--- 'Downgrade_Event' Dummy Created ---\n",
      "Value counts for the Downgrade Event flag:\n",
      "Downgrade_Event\n",
      "0    467439\n",
      "1     12558\n",
      "Name: count, dtype: int64\n"
     ]
    }
   ],
   "source": [
    "# --- Verification ---\n",
    "print(\"--- 'Downgrade_Event' Dummy Created ---\")\n",
    "print(\"Value counts for the Downgrade Event flag:\")\n",
    "print(analysis_df['Downgrade_Event'].value_counts())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now we create our policy dummies and the final interaction terms.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "# 1. Create the policy dummy from ACEEE ranks\n",
    "# We use the 'Strong_Policy_Top10' column created in the python script.\n",
    "analysis_df['Strong_Policy_ACEEE'] = analysis_df['Strong_Policy_Top10']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "# 2. Create the policy dummy from RPS data\n",
    "# The 'has_rps' column is already our dummy variable. We'll fill any remaining NaNs with 0.\n",
    "analysis_df['has_rps'] = analysis_df['has_rps'].fillna(0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [],
   "source": [
    "# 3. Create the interaction terms\n",
    "analysis_df['Interaction_ACEEE'] = analysis_df['Downgrade_Event'] * analysis_df['Strong_Policy_ACEEE']\n",
    "analysis_df['Interaction_RPS'] = analysis_df['Downgrade_Event'] * analysis_df['has_rps']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "--- Interaction Terms Created ---\n",
      "\n",
      "Sample of the final data for regression:\n"
     ]
    },
    {
     "data": {
      "application/vnd.microsoft.datawrangler.viewer.v0+json": {
       "columns": [
        {
         "name": "index",
         "rawType": "int64",
         "type": "integer"
        },
        {
         "name": "date",
         "rawType": "datetime64[ns]",
         "type": "datetime"
        },
        {
         "name": "state_abbr",
         "rawType": "object",
         "type": "unknown"
        },
        {
         "name": "Downgrade_Event",
         "rawType": "int64",
         "type": "integer"
        },
        {
         "name": "Strong_Policy_ACEEE",
         "rawType": "float64",
         "type": "float"
        },
        {
         "name": "Interaction_ACEEE",
         "rawType": "float64",
         "type": "float"
        },
        {
         "name": "has_rps",
         "rawType": "float64",
         "type": "float"
        },
        {
         "name": "Interaction_RPS",
         "rawType": "float64",
         "type": "float"
        }
       ],
       "ref": "1ac0a79b-255b-4549-bd0c-8cd906557777",
       "rows": [
        [
         "567236",
         "2020-05-31 00:00:00",
         null,
         "1",
         null,
         null,
         "0.0",
         "0.0"
        ],
        [
         "85195",
         "2020-01-31 00:00:00",
         "SK",
         "1",
         null,
         null,
         "0.0",
         "0.0"
        ],
        [
         "524717",
         "2021-12-31 00:00:00",
         "NY",
         "1",
         "1.0",
         "1.0",
         "1.0",
         "1.0"
        ],
        [
         "164485",
         "2024-12-31 00:00:00",
         "BC",
         "1",
         null,
         null,
         "0.0",
         "0.0"
        ],
        [
         "512166",
         "2019-07-31 00:00:00",
         "MD",
         "1",
         "1.0",
         "1.0",
         "1.0",
         "1.0"
        ],
        [
         "283388",
         "2020-03-31 00:00:00",
         "AZ",
         "1",
         "0.0",
         "0.0",
         "1.0",
         "1.0"
        ],
        [
         "61894",
         "2024-06-30 00:00:00",
         "MN",
         "1",
         "1.0",
         "1.0",
         "1.0",
         "1.0"
        ],
        [
         "196376",
         "2019-10-31 00:00:00",
         "GA",
         "1",
         "0.0",
         "0.0",
         "0.0",
         "0.0"
        ],
        [
         "58000",
         "2020-11-30 00:00:00",
         "NJ",
         "1",
         "0.0",
         "0.0",
         "1.0",
         "1.0"
        ],
        [
         "204226",
         "2020-06-30 00:00:00",
         "NY",
         "1",
         "1.0",
         "1.0",
         "1.0",
         "1.0"
        ]
       ],
       "shape": {
        "columns": 7,
        "rows": 10
       }
      },
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>date</th>\n",
       "      <th>state_abbr</th>\n",
       "      <th>Downgrade_Event</th>\n",
       "      <th>Strong_Policy_ACEEE</th>\n",
       "      <th>Interaction_ACEEE</th>\n",
       "      <th>has_rps</th>\n",
       "      <th>Interaction_RPS</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>567236</th>\n",
       "      <td>2020-05-31</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>85195</th>\n",
       "      <td>2020-01-31</td>\n",
       "      <td>SK</td>\n",
       "      <td>1</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>524717</th>\n",
       "      <td>2021-12-31</td>\n",
       "      <td>NY</td>\n",
       "      <td>1</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>164485</th>\n",
       "      <td>2024-12-31</td>\n",
       "      <td>BC</td>\n",
       "      <td>1</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>512166</th>\n",
       "      <td>2019-07-31</td>\n",
       "      <td>MD</td>\n",
       "      <td>1</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>283388</th>\n",
       "      <td>2020-03-31</td>\n",
       "      <td>AZ</td>\n",
       "      <td>1</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>61894</th>\n",
       "      <td>2024-06-30</td>\n",
       "      <td>MN</td>\n",
       "      <td>1</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>196376</th>\n",
       "      <td>2019-10-31</td>\n",
       "      <td>GA</td>\n",
       "      <td>1</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>58000</th>\n",
       "      <td>2020-11-30</td>\n",
       "      <td>NJ</td>\n",
       "      <td>1</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>204226</th>\n",
       "      <td>2020-06-30</td>\n",
       "      <td>NY</td>\n",
       "      <td>1</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "             date state_abbr  Downgrade_Event  Strong_Policy_ACEEE  Interaction_ACEEE  has_rps  Interaction_RPS\n",
       "567236 2020-05-31        NaN                1                  NaN                NaN      0.0              0.0\n",
       "85195  2020-01-31         SK                1                  NaN                NaN      0.0              0.0\n",
       "524717 2021-12-31         NY                1                  1.0                1.0      1.0              1.0\n",
       "164485 2024-12-31         BC                1                  NaN                NaN      0.0              0.0\n",
       "512166 2019-07-31         MD                1                  1.0                1.0      1.0              1.0\n",
       "283388 2020-03-31         AZ                1                  0.0                0.0      1.0              1.0\n",
       "61894  2024-06-30         MN                1                  1.0                1.0      1.0              1.0\n",
       "196376 2019-10-31         GA                1                  0.0                0.0      0.0              0.0\n",
       "58000  2020-11-30         NJ                1                  0.0                0.0      1.0              1.0\n",
       "204226 2020-06-30         NY                1                  1.0                1.0      1.0              1.0"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# --- Verification ---\n",
    "print(\"\\n--- Interaction Terms Created ---\")\n",
    "\n",
    "# Display the key new columns to see the result\n",
    "display_cols = ['date', 'state_abbr', 'Downgrade_Event', 'Strong_Policy_ACEEE', 'Interaction_ACEEE', 'has_rps', 'Interaction_RPS']\n",
    "print(\"\\nSample of the final data for regression:\")\n",
    "\n",
    "# Show a sample where there was a downgrade event to see if the interaction worked\n",
    "display(analysis_df[analysis_df['Downgrade_Event'] == 1][display_cols].sample(10, random_state=1))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Analysis of the Output**\n",
    "\n",
    "*   **Downgrade Event Flag:** You've correctly identified **12,558** firm-month observations that fall within a 12-month \"treatment\" window following an ESG downgrade.\n",
    "*   **Interaction Term Creation:** The sample table shows the logic working perfectly. For example:\n",
    "    *   In row 512166, the firm is in Maryland (`MD`), a strong policy state (`Strong_Policy_ACEEE` = 1.0). Since it's also a downgrade event, the `Interaction_ACEEE` term is correctly calculated as `1 * 1 = 1`.\n",
    "    *   In row 196376, the firm is in Georgia (`GA`), a weaker policy state (`Strong_Policy_ACEEE` = 0.0). Even though it's a downgrade event, the `Interaction_ACEEE` is correctly `1 * 0 = 0`.\n",
    "    *   Rows with `NaN` for `state_abbr` are correctly showing `NaN` for the policy-related variables, as they are non-US firms."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 5. Final Analysis: Regression Results & Visualization üìà\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "\n",
    "We have now arrived at the final analytical step. Here, we will execute the panel regressions specified in our methodology to formally test our hypothesis. We will run two separate models using our different policy proxies (ACEEE rank and RPS mandate) to ensure the robustness of our findings.\n",
    "\n",
    "Following the regressions, we will create a **coefficient plot**. This type of visualization is standard practice for interpreting interaction effects. It will allow us to clearly see and compare the estimated effect of an ESG downgrade for firms in \"Weak Policy\" states versus those in \"Strong Policy\" states. This graphical representation makes the results of our complex model intuitive and easy to understand."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "--- Running regressions on 433081 firm-month observations. ---\n",
      "\n",
      "\n",
      "================================================================================\n",
      "      MODEL 1: MODERATING EFFECT OF ACEEE TOP 10 RANKING\n",
      "================================================================================\n",
      "                            OLS Regression Results                            \n",
      "==============================================================================\n",
      "Dep. Variable:                 ex_ret   R-squared:                       0.147\n",
      "Model:                            OLS   Adj. R-squared:                  0.147\n",
      "Method:                 Least Squares   F-statistic:                     2649.\n",
      "Date:                Wed, 09 Jul 2025   Prob (F-statistic):               0.00\n",
      "Time:                        20:43:43   Log-Likelihood:             2.3829e+05\n",
      "No. Observations:              433081   AIC:                        -4.766e+05\n",
      "Df Residuals:                  433073   BIC:                        -4.765e+05\n",
      "Df Model:                           7                                         \n",
      "Covariance Type:              cluster                                         \n",
      "=======================================================================================================\n",
      "                                          coef    std err          t      P>|t|      [0.025      0.975]\n",
      "-------------------------------------------------------------------------------------------------------\n",
      "Intercept                               0.0014      0.000      5.526      0.000       0.001       0.002\n",
      "Downgrade_Event                        -0.0024      0.002     -1.491      0.136      -0.006       0.001\n",
      "Strong_Policy_ACEEE                  -7.38e-05      0.000     -0.179      0.858      -0.001       0.001\n",
      "Downgrade_Event:Strong_Policy_ACEEE -8.816e-05      0.003     -0.027      0.979      -0.007       0.006\n",
      "mkt_rf                                  1.0056      0.008    126.389      0.000       0.990       1.021\n",
      "smb                                     0.8204      0.014     56.755      0.000       0.792       0.849\n",
      "hml                                     0.2288      0.011     21.069      0.000       0.208       0.250\n",
      "mom                                    -0.0868      0.008    -10.758      0.000      -0.103      -0.071\n",
      "==============================================================================\n",
      "Omnibus:                  1040358.229   Durbin-Watson:                   2.025\n",
      "Prob(Omnibus):                  0.000   Jarque-Bera (JB):     227497474311.053\n",
      "Skew:                          23.570   Prob(JB):                         0.00\n",
      "Kurtosis:                    3553.349   Cond. No.                         45.8\n",
      "==============================================================================\n",
      "\n",
      "Notes:\n",
      "[1] Standard Errors are robust to cluster correlation (cluster)\n"
     ]
    }
   ],
   "source": [
    "# Prepare the final dataframe by dropping any rows with missing essential data\n",
    "regression_df = analysis_df.dropna(subset=[\n",
    "    'ex_ret', 'Downgrade_Event', 'Strong_Policy_ACEEE', 'Interaction_ACEEE', 'has_rps', 'Interaction_RPS',\n",
    "    'mkt_rf', 'smb', 'hml', 'mom'\n",
    "]).copy()\n",
    "\n",
    "print(f\"--- Running regressions on {len(regression_df)} firm-month observations. ---\")\n",
    "\n",
    "\n",
    "# --- Model 1: Using ACEEE Ranking as the Policy Measure ---\n",
    "model1_formula = \"ex_ret ~ Downgrade_Event * Strong_Policy_ACEEE + mkt_rf + smb + hml + mom\"\n",
    "\n",
    "# Fit the OLS model first\n",
    "model1_fit = ols(formula=model1_formula, data=regression_df).fit()\n",
    "\n",
    "# Now, calculate the cluster-robust standard errors\n",
    "model1_robust = model1_fit.get_robustcov_results(cov_type='cluster', groups=regression_df['cusip8'])\n",
    "\n",
    "print(\"\\n\\n\" + \"=\"*80)\n",
    "print(\"      MODEL 1: MODERATING EFFECT OF ACEEE TOP 10 RANKING\")\n",
    "print(\"=\"*80)\n",
    "print(model1_robust.summary())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### **Analysis of Model 1: Moderating Effect of ACEEE Top 10 Ranking**\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "\n",
    "This regression tests whether the stock market reaction to an ESG downgrade is different for firms in states with very strong environmental policies, defined as being in the Top 10 of the ACEEE Scorecard.\n",
    "\n",
    "**Overall Model Fit:**\n",
    "*   The **R-squared** is 0.147, which means that our model (the Fama-French-Carhart factors plus our event and policy variables) explains about 14.7% of the monthly variation in individual stock excess returns. This is a typical and reasonable value for this type of firm-level regression.\n",
    "*   The **F-statistic** is highly significant (`Prob (F-statistic): 0.00`), indicating that the model as a whole is useful in explaining stock returns.\n",
    "\n",
    "**Interpreting the Key Coefficients:**\n",
    "\n",
    "The core of our analysis rests on interpreting the coefficients for `Downgrade_Event`, `Strong_Policy_ACEEE`, and their interaction.\n",
    "\n",
    "1.  **`Downgrade_Event` Coefficient:**\n",
    "    *   **Value:** `-0.0024` (or -0.24% per month).\n",
    "    *   **Interpretation:** This is the estimated effect of a downgrade for the **baseline group**, which in this model are firms in \"Weak Policy\" states (i.e., states *not* in the ACEEE Top 10). The result suggests these firms underperform by 0.24% per month in the year following a downgrade.\n",
    "    *   **Significance:** The p-value (`P>|t|`) is **0.136**. Since this is greater than the conventional threshold of 0.10, this coefficient is **not statistically significant**. We cannot confidently say this effect is different from zero.\n",
    "\n",
    "2.  **`Strong_Policy_ACEEE` Coefficient:**\n",
    "    *   **Value:** `-0.00007` (or -0.007% per month).\n",
    "    *   **Interpretation:** This coefficient represents the difference in returns between a firm in a strong policy state and a firm in a weak policy state *during a normal month (when there is no downgrade event)*. The result suggests firms in strong policy states perform very slightly worse, but the effect is economically negligible.\n",
    "    *   **Significance:** The p-value is **0.858**, which is very high. The result is **not statistically significant**.\n",
    "\n",
    "3.  **`Downgrade_Event:Strong_Policy_ACEEE` (The Interaction Term):**\n",
    "    *   **Value:** `-0.00008` (or -0.008% per month).\n",
    "    *   **Interpretation:** This is the **most important coefficient** for our hypothesis. It represents the *additional* effect of a downgrade *specifically for firms in strong policy states*. The negative sign means that the downgrade effect is slightly *more negative* (by -0.008%) for firms in strong policy states, which is in the direction of our hypothesis.\n",
    "    *   **Significance:** The p-value is **0.979**. This is extremely high. The coefficient is **not remotely statistically significant**.\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### **Conclusion for Model 1**\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "\n",
    "Based on this model, **we do not find statistical evidence to support our hypothesis.**\n",
    "\n",
    "*   The total effect of a downgrade for a firm in a **strong policy state** is the sum of the main effect and the interaction effect: `-0.0024 + (-0.00008) = -0.00248`, or about -0.25% per month.\n",
    "*   However, because the interaction term's p-value is so high (0.979), we cannot conclude that this -0.25% is statistically different from the -0.24% effect for firms in weak policy states.\n",
    "\n",
    "In simple terms, while it looks like there might be a tiny additional negative effect for firms in ACEEE Top 10 states, the data does not allow us to say this with any statistical confidence. The difference is indistinguishable from random noise."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "\n",
      "================================================================================\n",
      "      MODEL 2: MODERATING EFFECT OF STATE RPS MANDATE\n",
      "================================================================================\n",
      "                            OLS Regression Results                            \n",
      "==============================================================================\n",
      "Dep. Variable:                 ex_ret   R-squared:                       0.147\n",
      "Model:                            OLS   Adj. R-squared:                  0.147\n",
      "Method:                 Least Squares   F-statistic:                     2654.\n",
      "Date:                Wed, 09 Jul 2025   Prob (F-statistic):               0.00\n",
      "Time:                        20:50:05   Log-Likelihood:             2.3829e+05\n",
      "No. Observations:              433081   AIC:                        -4.766e+05\n",
      "Df Residuals:                  433073   BIC:                        -4.765e+05\n",
      "Df Model:                           7                                         \n",
      "Covariance Type:              cluster                                         \n",
      "===========================================================================================\n",
      "                              coef    std err          t      P>|t|      [0.025      0.975]\n",
      "-------------------------------------------------------------------------------------------\n",
      "Intercept                   0.0025      0.001      4.667      0.000       0.001       0.004\n",
      "Downgrade_Event            -0.0028      0.004     -0.750      0.453      -0.010       0.004\n",
      "has_rps                    -0.0013      0.001     -2.253      0.024      -0.002      -0.000\n",
      "Downgrade_Event:has_rps     0.0004      0.004      0.095      0.924      -0.007       0.008\n",
      "mkt_rf                      1.0056      0.008    126.381      0.000       0.990       1.021\n",
      "smb                         0.8203      0.014     56.743      0.000       0.792       0.849\n",
      "hml                         0.2288      0.011     21.069      0.000       0.208       0.250\n",
      "mom                        -0.0868      0.008    -10.761      0.000      -0.103      -0.071\n",
      "==============================================================================\n",
      "Omnibus:                  1040376.164   Durbin-Watson:                   2.025\n",
      "Prob(Omnibus):                  0.000   Jarque-Bera (JB):     227516487381.114\n",
      "Skew:                          23.571   Prob(JB):                         0.00\n",
      "Kurtosis:                    3553.498   Cond. No.                         57.5\n",
      "==============================================================================\n",
      "\n",
      "Notes:\n",
      "[1] Standard Errors are robust to cluster correlation (cluster)\n"
     ]
    }
   ],
   "source": [
    "# --- Model 2: Using RPS Mandate as the Policy Measure ---\n",
    "model2_formula = \"ex_ret ~ Downgrade_Event * has_rps + mkt_rf + smb + hml + mom\"\n",
    "\n",
    "# Fit the OLS model first\n",
    "model2_fit = ols(formula=model2_formula, data=regression_df).fit()\n",
    "\n",
    "# Now, calculate the cluster-robust standard errors\n",
    "model2_robust = model2_fit.get_robustcov_results(cov_type='cluster', groups=regression_df['cusip8'])\n",
    "\n",
    "print(\"\\n\\n\" + \"=\"*80)\n",
    "print(\"      MODEL 2: MODERATING EFFECT OF STATE RPS MANDATE\")\n",
    "print(\"=\"*80)\n",
    "print(model2_robust.summary())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### **Analysis of Model 2: Moderating Effect of State RPS Mandate**\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "\n",
    "This second regression provides a robustness check for our hypothesis using a different, more objective measure of policy strength: whether a state has a mandatory Renewable Portfolio Standard (RPS).\n",
    "\n",
    "**Overall Model Fit:**\n",
    "*   Similar to the first model, the **R-squared** is 0.147, and the overall model is highly significant (`Prob (F-statistic): 0.00`), indicating that the variables collectively explain a meaningful portion of stock return variation.\n",
    "\n",
    "**Interpreting the Key Coefficients:**\n",
    "\n",
    "Again, we focus on the coefficients for the event, the policy, and their interaction.\n",
    "\n",
    "1.  **`Downgrade_Event` Coefficient:**\n",
    "    *   **Value:** `-0.0028` (or -0.28% per month).\n",
    "    *   **Interpretation:** This is the estimated effect of a downgrade for the **baseline group**, which in this model are firms in states that do *not* have an RPS mandate. The result suggests these firms underperform by 0.28% per month in the year following a downgrade.\n",
    "    *   **Significance:** The p-value (`P>|t|`) is **0.453**. This is high, so the coefficient is **not statistically significant**.\n",
    "\n",
    "2.  **`has_rps` Coefficient:**\n",
    "    *   **Value:** `-0.0013` (or -0.13% per month).\n",
    "    *   **Interpretation:** This is the difference in returns between a firm in an RPS state and a firm in a non-RPS state *during a normal month*. The negative sign suggests that firms in states with RPS mandates tend to slightly underperform their peers in non-RPS states, all else being equal.\n",
    "    *   **Significance:** The p-value is **0.024**, which is less than 0.05. This result **is statistically significant (**)**. This is an interesting finding on its own, suggesting a potential \"cost\" or different risk profile for firms operating under these mandates.\n",
    "\n",
    "3.  **`Downgrade_Event:has_rps` (The Interaction Term):**\n",
    "    *   **Value:** `+0.0004` (or +0.04% per month).\n",
    "    *   **Interpretation:** This is our key coefficient. It represents the *additional* effect of a downgrade *specifically for firms in RPS states*. The sign is positive, which is **opposite** to our hypothesis. It suggests that the negative effect of a downgrade is actually *less severe* (by +0.04%) for firms in RPS states.\n",
    "    *   **Significance:** The p-value is **0.924**. This is extremely high. The coefficient is **not statistically significant**."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### **Conclusion for Model 2**\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "\n",
    "This model also **fails to support our hypothesis.**\n",
    "\n",
    "*   The total effect of a downgrade for a firm in an **RPS state** is the sum of the main effect and the interaction effect: `-0.0028 + 0.0004 = -0.0024`, or about -0.24% per month.\n",
    "*   The interaction term's p-value (0.924) is nowhere near significant, meaning we cannot conclude that the effect of a downgrade is any different for firms in RPS states compared to non-RPS states. The small difference we observe is statistically indistinguishable from zero.\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### **Combined Conclusion from Both Models:**\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "\n",
    "Across two different, reasonable definitions of \"strong environmental policy\" (ACEEE rank and RPS mandate), we find no statistical evidence that the market's reaction to an ESG downgrade is more severe for firms operating in these stricter environments. While our portfolio-level analysis showed that downgrades are associated with significant negative abnormal returns overall, this firm-level analysis shows that this effect does not appear to be significantly moderated by the state-level policies we tested."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1200x800 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# --- Step 30b: Visualize the Interaction Effects (Final, Corrected) ---\n",
    "\n",
    "# --- Extract coefficients by their integer position using NumPy array indexing ---\n",
    "\n",
    "# For Model 1 (ACEEE) from the summary table:\n",
    "# Position 0: Intercept\n",
    "# Position 1: Downgrade_Event\n",
    "# Position 2: Strong_Policy_ACEEE\n",
    "# Position 3: Downgrade_Event:Strong_Policy_ACEEE\n",
    "eff_weak_aceee   = model1_robust.params[1]  # Effect for weak states\n",
    "eff_strong_aceee = model1_robust.params[1] + model1_robust.params[3] # Main Effect + Interaction\n",
    "\n",
    "# For Model 2 (RPS) from the summary table:\n",
    "# Position 0: Intercept\n",
    "# Position 1: Downgrade_Event\n",
    "# Position 2: has_rps\n",
    "# Position 3: Downgrade_Event:has_rps\n",
    "eff_weak_rps   = model2_robust.params[1] # Effect for weak states\n",
    "eff_strong_rps = model2_robust.params[1] + model2_robust.params[3] # Main Effect + Interaction\n",
    "\n",
    "\n",
    "# Create a dataframe for plotting\n",
    "plot_data = pd.DataFrame({\n",
    "    'Policy_Type': ['ACEEE Top 10 Rank', 'ACEEE Top 10 Rank', 'RPS Mandate', 'RPS Mandate'],\n",
    "    'Firm_Environment': ['Weak Policy State', 'Strong Policy State', 'Weak Policy State', 'Strong Policy State'],\n",
    "    'Effect': [eff_weak_aceee, eff_strong_aceee, eff_weak_rps, eff_strong_rps]\n",
    "})\n",
    "\n",
    "# --- Create the Plot ---\n",
    "plt.figure(figsize=(12, 8))\n",
    "sns.set_style(\"whitegrid\")\n",
    "\n",
    "barplot = sns.barplot(x='Policy_Type', y='Effect', hue='Firm_Environment', data=plot_data,\n",
    "                        palette={'Weak Policy State': 'lightcoral', 'Strong Policy State': 'darkred'})\n",
    "\n",
    "# Add titles and labels\n",
    "plt.title('Stock Market Reaction to ESG Downgrades by State Policy Environment', fontsize=18, fontweight='bold', pad=20)\n",
    "plt.ylabel('Average Monthly Abnormal Return (Alpha %)', fontsize=14)\n",
    "plt.xlabel('Definition of Policy Strength', fontsize=14)\n",
    "\n",
    "# Format Y-axis as percentage\n",
    "from matplotlib.ticker import PercentFormatter\n",
    "barplot.yaxis.set_major_formatter(PercentFormatter(1.0, decimals=2))\n",
    "\n",
    "plt.axhline(0, color='black', linewidth=1, linestyle='--')\n",
    "plt.legend(title='Firm HQ Environment', title_fontsize='13', fontsize='12')\n",
    "\n",
    "# Add value labels on top of the bars\n",
    "for p in barplot.patches:\n",
    "    label_text = f\"{p.get_height()*100:.2f}%\"\n",
    "    barplot.annotate(label_text, \n",
    "                     (p.get_x() + p.get_width() / 2., p.get_height()), \n",
    "                     ha = 'center', va = 'center', \n",
    "                     xytext = (0, -15 if p.get_height() < 0 else 15), \n",
    "                     textcoords = 'offset points',\n",
    "                     fontweight='bold', color='white' if p.get_height() < -0.001 else 'black')\n",
    "\n",
    "sns.despine()\n",
    "plt.tight_layout()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### **Analysis of the Final Visualization**\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "This coefficient plot provides a powerful and intuitive summary of your regression findings. It visualizes the total estimated market reaction to an ESG downgrade, conditional on the firm's state-level policy environment.\n",
    "\n",
    "*   **Chart Structure:** The chart correctly compares two different models (or \"definitions of policy strength\") side-by-side. Within each model, it displays the calculated effect for firms in \"Weak Policy States\" (light red) versus \"Strong Policy States\" (dark red). The Y-axis properly represents the size of the abnormal return (alpha), with the dashed line at 0.00% serving as the crucial benchmark for \"no effect.\"\n",
    "\n",
    "*   **ACEEE Top 10 Rank Model (Left Side):**\n",
    "    *   This group of bars shows the results from Model 1. The abnormal return for a downgrade is negative in both weak policy states (-0.24%) and strong policy states (-0.25%).\n",
    "    *   **Visual Insight:** The key takeaway is how similar the two bars are in height. There is almost no visual difference between the market's reaction in a weak vs. a strong policy state. This graphically confirms the statistical result from the regression: the interaction term was not significant, meaning we cannot distinguish between these two effects.\n",
    "\n",
    "*   **RPS Mandate Model (Right Side):**\n",
    "    *   This group of bars shows the results from Model 2. The abnormal return for a downgrade is negative for both groups: -0.28% for weak states and -0.24% for strong states.\n",
    "    *   **Visual Insight:** This side tells a slightly different but consistent story. Visually, the underperformance appears slightly *less* severe in states with an RPS mandate. However, as with the ACEEE model, the two bars are very close in height. This again confirms the statistical finding that the interaction term was not significant. The visual difference is minimal and likely due to random statistical noise.\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### **Overall Conclusion from the Graph**\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "\n",
    "The plot masterfully conveys the main finding of your original research. While ESG downgrades are associated with a negative market reaction (all bars are below the zero line), the magnitude of this reaction **does not appear to depend on the stringency of the state's environmental policies.** The visual differences between the \"Weak\" and \"Strong\" policy bars are negligible for both the ACEEE and RPS models, reinforcing the non-significant p-values on the interaction terms in your regressions.\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "3.11.4",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
